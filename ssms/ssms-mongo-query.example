db.ingredients.insert([
    {
        _id: "2017I1",
        name: "Fernamento",
        unit: "g",
    },
    {
        _id: "2017I2",
        name: "Farinha de Rosca",
        unit: "g",
    },
    {
        _id: "2017I3",
        name: "Farinha branca",
        unit: "g",
    }
])

db.orders.insert([
    {
        _id: 1,
        user_id: 1,
        products: [
            {_id: 1, amount: 2},
            {_id: 2, amount: 5},
            {_id: 3, amount: 1},
        ]
    },
    {
        _id: 2,
        user_id: 1,
        products: [
            {_id: 1, amount: 1},
            {_id: 2, amount: 1},
            {_id: 3, amount: 1},
        ]
    }
])

db.products.insert([
    { 
        _id: 1, 
        name: "Bolo 1", 
        ingredients: [
            {amout: 100, _id: "2017I1"},
            {amout: 200, _id: "2017I2"}
        ]
    },  
    { 
        _id: 2, 
        name: "Bolo 2", 
        ingredients: [
            {amout: 100, _id: "2017I1"},
            {amout: 200, _id: "2017I3"}
        ]
    },
    { 
        _id: 3, 
        name: "Bolo 3", 
        ingredients: [
            {amout: 100, _id: "2017I3"},
            {amout: 200, _id: "2017I2"}
        ]
    }
])


// list all ingredients - based on all registered products
db.products.aggregate([
    {
        $unwind: "$ingredients"
    }, 
    {
        $group: {
            _id: "$ingredients._id", 
            count: { $sum: 1 }, 
            total: { $sum : "$ingredients.amout" }
        },
    },
    {
        $lookup: {
            from: "ingredients",
            localField: "_id",
            foreignField: "_id",
            as: "ingredients"
        }
    },
])

// list all ingredients - based on all registered orders
db.orders.aggregate([
    {
        $match: {_id: 2}
    },
    // unwind all products
    {
        $unwind: "$products"
    },
    // group orders by product id and count the amount of products
    {
        $group: {
            _id: "$products._id", 
            count: { $sum: 1 }, 
            total: { $sum : "$products.amount" },
        }
    }, 

    // lookup (join) the products grouped berfore
    {
        $lookup: {
            from: "products",
            localField: "_id",
            foreignField: "_id",
            as: "product"
        }
    },

    // assign just one product per result
    { 
        "$project": { 
            "count": true,
            "total": true,
            "product": { "$arrayElemAt": [ "$product", 0 ] } 
        }
    },

    // unwind each ingredient from the products grouped before
    {
        $unwind: "$product.ingredients"
    }, 
    {
        $group: {
            _id: "$product.ingredients._id", 
            count: { $sum: "$total" }, 
            total: { $sum : {$multiply: ["$product.ingredients.amout", "$total"] } }
        },
    },
    {
        $lookup: {
            from: "ingredients",
            localField: "_id",
            foreignField: "_id",
            as: "ingredient"
        }
    },
    { 
        "$project": { 
            "count": true,
            "total": true,
            "ingredient": { "$arrayElemAt": [ "$ingredient", 0 ] } 
        }
    },
])

db.products.aggregate([
    {
        $unwind: "$ingredients",
    },
    {
        $group: {
            _id: "$ingredients._id"
        }
    }
])


// list all products by order
db.orders.aggregate([
    {$unwind: "$products"},
    {
        $lookup: {
            from: "products",
            localField: "products._id",
            foreignField: "_id",
            as: "product"

        }
    },
    { 
        "$project": { 
            _id: true,
            user_id: true,
            product: { "$arrayElemAt": [ "$product", 0 ] },
        }
    },
    {
        $group: {
            _id: "$_id",
            products: {
                $push: "$product"
            }
        }
    }
])